module Decoder where

import Data.Ix
import Data.Int
import Data.Word
import Data.Bits

type Immediate = Int32

data RegIdx = Zero | RA | SP | GP | TP | T0 | T1 | T2 | FP
    | S1 | A0 | A1 | A2 | A3 | A4 | A5 | A6 | A7 | S2 | S3
    | S4 | S5 | S6 | S7 | S8 | S9 | S10 | S11 | T3 | T4
    | T5 | T6 deriving (Ord, Eq, Ix, Bounded, Show, Enum)

data {{ .InstType }} =
{{- range $name, $instr := .Instrs }}
  {{ (makeRecord $name $instr) }} |
{{- end }}
  InvalidInstruction deriving (Show)

------------------------------------------------------------------------

-- | Convert to an unsigned word to a signed number.
--
-- Examples:
--
-- >>> fromTwoscomp 32 0xffffffff
-- -1
-- >>> fromTwoscomp 3 4
-- -4
-- >>> fromTwoscomp 3 3
-- 3
fromTwoscomp :: Word32 -> Word32 -> Int32
fromTwoscomp numBits n = fromIntegral $ -(n .&. mask) + (n .&. complement mask)
    where
        mask :: Word32
        mask = 2^(numBits - 1)

-- | Extract a bit field from a RISC-V instruction word.
--
-- Examples:
--
-- >>> let word = 0x23421337
-- >>> instrField 24 32 word
-- 35
-- >>> instrField 0 7 word
-- 55
instrField :: Int -> Int -> Word32 -> Word32
instrField start end w = mask start (end + 1) .&. shiftR w start
    where
        -- Create a 32-bit bit mask in the range [start,end-1].
        mask :: Int -> Int -> Word32
        mask start end = complement $ shift (maxBound :: Word32) (end - start)

------------------------------------------------------------------------

immI :: Word32 -> Immediate
immI = fromIntegral . fromTwoscomp 12 . instrField 20 31

immS :: Word32 -> Immediate
immS i = fromTwoscomp 12 $ fromIntegral $
    (instrField 25 31 i `shift` 5) .|.  instrField 07 11 i

immB :: Word32 -> Immediate
immB i = fromTwoscomp 13 $
         (instrField 31 31 i `shift` 12)
     .|. (instrField 07 07 i `shift` 11)
     .|. (instrField 25 30 i `shift` 05)
     .|. (instrField 08 11 i `shift` 01)

immU :: Word32 -> Immediate
immU i = fromIntegral $ instrField 12 31 i `shiftL` 12

immJ :: Word32 -> Immediate
immJ i = fromTwoscomp 21 $
        (instrField 31 31 i `shift` 20)
     .|. (instrField 12 19 i `shift` 12)
     .|. (instrField 20 20 i `shift` 11)
     .|. (instrField 21 30 i `shift` 1)

mkRs1 :: Word32 -> RegIdx
mkRs1 = toEnum . fromIntegral . instrField 15 19

mkRs2 :: Word32 -> RegIdx
mkRs2 = toEnum . fromIntegral . instrField 20 24

mkRd :: Word32 -> RegIdx
mkRd = toEnum . fromIntegral . instrField 7 11

------------------------------------------------------------------------

decode :: Word32 -> {{ .InstType }}
decode instrWord
{{- range $name, $instr := .Instrs }}
  | instrWord .&. {{ .RawMask }} == {{ .RawMatch }} = {{ (makeConstructor $name $instr) }}
{{- end }}
