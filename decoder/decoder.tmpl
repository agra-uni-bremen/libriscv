module Decoder where

import Data.Ix
import Data.Int
import Data.Word
import Data.Bits

type Immediate = Int32

data RegIdx = Zero | RA | SP | GP | TP | T0 | T1 | T2 | FP
    | S1 | A0 | A1 | A2 | A3 | A4 | A5 | A6 | A7 | S2 | S3
    | S4 | S5 | S6 | S7 | S8 | S9 | S10 | S11 | T3 | T4
    | T5 | T6 deriving (Ord, Eq, Ix, Bounded, Show, Enum)

data {{ .InstType }} =
{{- range $name, $instr := .Instrs }}
  {{ (makeRecord $name $instr) }} |
{{- end }}
  InvalidInstruction deriving (Show)

decode :: Word32 -> {{ .InstType }}
decode instrWord
{{- range $name, $instr := .Instrs }}
  | instrWord .&. {{ .RawMask }} == {{ .RawMatch }} = {{ (makeConstructor $name $instr) }}
{{- end }}
